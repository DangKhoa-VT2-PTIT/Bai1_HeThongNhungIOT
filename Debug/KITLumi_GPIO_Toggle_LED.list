
KITLumi_GPIO_Toggle_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000394  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000530  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000530  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000179c  00000000  00000000  00010560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000054f  00000000  00000000  00011cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00012250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000250  00000000  00000000  000124d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bf6d  00000000  00000000  00012728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001588  00000000  00000000  0001e695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003b846  00000000  00000000  0001fc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  0005b463  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000aa0  00000000  00000000  0005b530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000510 	.word	0x08000510

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000510 	.word	0x08000510

080001d4 <main>:
//static void Delay_ms(uint16_t time);

// Global var
uint8_t Status;
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    /* Loop forever */
	LED_Init();
 80001d8:	f000 f81e 	bl	8000218 <LED_Init>
	BUTTON_Init();
 80001dc:	f000 f83a 	bl	8000254 <BUTTON_Init>
	while(1)
	{
		Status = ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_B2_PIN);
 80001e0:	2103      	movs	r1, #3
 80001e2:	480a      	ldr	r0, [pc, #40]	; (800020c <main+0x38>)
 80001e4:	f000 f880 	bl	80002e8 <ButtonRead_Status>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <main+0x3c>)
 80001ee:	701a      	strb	r2, [r3, #0]
		//Delay_ms(100);
		LEDControl_SetStatus(LED_GPIO_PORT, LED_PIN11, !Status);
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <main+0x3c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	bf0c      	ite	eq
 80001f8:	2301      	moveq	r3, #1
 80001fa:	2300      	movne	r3, #0
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	461a      	mov	r2, r3
 8000200:	210b      	movs	r1, #11
 8000202:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x40>)
 8000204:	f000 f840 	bl	8000288 <LEDControl_SetStatus>
		Status = ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_B2_PIN);
 8000208:	e7ea      	b.n	80001e0 <main+0xc>
 800020a:	bf00      	nop
 800020c:	40020400 	.word	0x40020400
 8000210:	2000001c 	.word	0x2000001c
 8000214:	40020000 	.word	0x40020000

08000218 <LED_Init>:
	}
}
//Function
static void LED_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	// Declare type variable GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable Clock GPIOA
	RCC_AHB1PeriphClockCmd(LEDControl_SetClock, ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	2001      	movs	r0, #1
 8000222:	f000 f931 	bl	8000488 <RCC_AHB1PeriphClockCmd>

	// Choose LED Pin
	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;
 8000226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800022a:	603b      	str	r3, [r7, #0]

	// Choose LED Pin as OUT
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800022c:	2301      	movs	r3, #1
 800022e:	713b      	strb	r3, [r7, #4]

	// Choose Pin Speed
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000230:	2302      	movs	r3, #2
 8000232:	717b      	strb	r3, [r7, #5]

	// Select Type: Push-Pull or Open Drain
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000234:	2300      	movs	r3, #0
 8000236:	71bb      	strb	r3, [r7, #6]

	// Select Pin Status
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000238:	2302      	movs	r3, #2
 800023a:	71fb      	strb	r3, [r7, #7]

	// Initializes all parameters
	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
 800023c:	463b      	mov	r3, r7
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <LED_Init+0x38>)
 8000242:	f000 f892 	bl	800036a <GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <BUTTON_Init>:
static void BUTTON_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
	// Declare type variable GPIO struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Enable Clock GPIOA
	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 800025a:	2101      	movs	r1, #1
 800025c:	2002      	movs	r0, #2
 800025e:	f000 f913 	bl	8000488 <RCC_AHB1PeriphClockCmd>

	// Choose LED Pin
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 8000262:	2308      	movs	r3, #8
 8000264:	603b      	str	r3, [r7, #0]

	// Choose LED Pin as OUT
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000266:	2300      	movs	r3, #0
 8000268:	713b      	strb	r3, [r7, #4]

	// Choose Pin Speed
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800026a:	2302      	movs	r3, #2
 800026c:	717b      	strb	r3, [r7, #5]

	// Select Pin Status
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800026e:	2301      	movs	r3, #1
 8000270:	71fb      	strb	r3, [r7, #7]

	// Initializes all parameters
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 8000272:	463b      	mov	r3, r7
 8000274:	4619      	mov	r1, r3
 8000276:	4803      	ldr	r0, [pc, #12]	; (8000284 <BUTTON_Init+0x30>)
 8000278:	f000 f877 	bl	800036a <GPIO_Init>
}
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40020400 	.word	0x40020400

08000288 <LEDControl_SetStatus>:
static void LEDControl_SetStatus(GPIO_TypeDef* GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	460b      	mov	r3, r1
 8000292:	70fb      	strb	r3, [r7, #3]
 8000294:	4613      	mov	r3, r2
 8000296:	70bb      	strb	r3, [r7, #2]
	// Set bit in BSRR registers
	if(Status == GPIO_PIN_SET)
 8000298:	78bb      	ldrb	r3, [r7, #2]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d10d      	bne.n	80002ba <LEDControl_SetStatus+0x32>
	{
		GPIOx->BSRRL |= 1 << GPIO_PIN;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	8b1b      	ldrh	r3, [r3, #24]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	b21a      	sxth	r2, r3
 80002a6:	78fb      	ldrb	r3, [r7, #3]
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f303 	lsl.w	r3, r1, r3
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	4313      	orrs	r3, r2
 80002b2:	b21b      	sxth	r3, r3
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	831a      	strh	r2, [r3, #24]
	}
	// Reset bit in BSRR registers
	if(Status == GPIO_PIN_RESET)
 80002ba:	78bb      	ldrb	r3, [r7, #2]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d10d      	bne.n	80002dc <LEDControl_SetStatus+0x54>
	{
		GPIOx->BSRRH |= 1 << GPIO_PIN;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	8b5b      	ldrh	r3, [r3, #26]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	78fb      	ldrb	r3, [r7, #3]
 80002ca:	2101      	movs	r1, #1
 80002cc:	fa01 f303 	lsl.w	r3, r1, r3
 80002d0:	b21b      	sxth	r3, r3
 80002d2:	4313      	orrs	r3, r2
 80002d4:	b21b      	sxth	r3, r3
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	835a      	strh	r2, [r3, #26]
	}
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <ButtonRead_Status>:
static uint8_t ButtonRead_Status(GPIO_TypeDef* GPIOx, uint8_t GPIO_PIN)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	460b      	mov	r3, r1
 80002f2:	70fb      	strb	r3, [r7, #3]
	uint32_t Read_Pin;
	// Read bit in IDR registers
	Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	691a      	ldr	r2, [r3, #16]
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	fa22 f303 	lsr.w	r3, r2, r3
 80002fe:	60fb      	str	r3, [r7, #12]
	Read_Pin = Read_Pin & 0x01;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	60fb      	str	r3, [r7, #12]

	return Read_Pin;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	b2db      	uxtb	r3, r3
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f8bf 	bl	80004c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ff43 	bl	80001d4 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	08000530 	.word	0x08000530
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	20000020 	.word	0x20000020

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>

0800036a <GPIO_Init>:
 800036a:	b480      	push	{r7}
 800036c:	b087      	sub	sp, #28
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	6039      	str	r1, [r7, #0]
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	e076      	b.n	8000474 <GPIO_Init+0x10a>
 8000386:	2201      	movs	r2, #1
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	613b      	str	r3, [r7, #16]
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	693a      	ldr	r2, [r7, #16]
 8000396:	4013      	ands	r3, r2
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d165      	bne.n	800046e <GPIO_Init+0x104>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	2103      	movs	r1, #3
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	43db      	mvns	r3, r3
 80003b2:	401a      	ands	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	4619      	mov	r1, r3
 80003c2:	697b      	ldr	r3, [r7, #20]
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	431a      	orrs	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d003      	beq.n	80003e0 <GPIO_Init+0x76>
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	791b      	ldrb	r3, [r3, #4]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d12e      	bne.n	800043e <GPIO_Init+0xd4>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	2103      	movs	r1, #3
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	43db      	mvns	r3, r3
 80003f0:	401a      	ands	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	4619      	mov	r1, r3
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	431a      	orrs	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	685a      	ldr	r2, [r3, #4]
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	b29b      	uxth	r3, r3
 8000416:	4619      	mov	r1, r3
 8000418:	2301      	movs	r3, #1
 800041a:	408b      	lsls	r3, r1
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	7992      	ldrb	r2, [r2, #6]
 800042c:	4611      	mov	r1, r2
 800042e:	697a      	ldr	r2, [r7, #20]
 8000430:	b292      	uxth	r2, r2
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	b292      	uxth	r2, r2
 8000438:	431a      	orrs	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	68da      	ldr	r2, [r3, #12]
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	b29b      	uxth	r3, r3
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	2103      	movs	r1, #3
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	401a      	ands	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	79db      	ldrb	r3, [r3, #7]
 800045e:	4619      	mov	r1, r3
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	3301      	adds	r3, #1
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	2b0f      	cmp	r3, #15
 8000478:	d985      	bls.n	8000386 <GPIO_Init+0x1c>
 800047a:	bf00      	nop
 800047c:	371c      	adds	r7, #28
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <RCC_AHB1PeriphClockCmd>:
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d006      	beq.n	80004a8 <RCC_AHB1PeriphClockCmd+0x20>
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800049c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800049e:	4909      	ldr	r1, [pc, #36]	; (80004c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	630b      	str	r3, [r1, #48]	; 0x30
 80004a6:	e006      	b.n	80004b6 <RCC_AHB1PeriphClockCmd+0x2e>
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	43db      	mvns	r3, r3
 80004b0:	4904      	ldr	r1, [pc, #16]	; (80004c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80004b2:	4013      	ands	r3, r2
 80004b4:	630b      	str	r3, [r1, #48]	; 0x30
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40023800 	.word	0x40023800

080004c8 <__libc_init_array>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	4d0d      	ldr	r5, [pc, #52]	; (8000500 <__libc_init_array+0x38>)
 80004cc:	4c0d      	ldr	r4, [pc, #52]	; (8000504 <__libc_init_array+0x3c>)
 80004ce:	1b64      	subs	r4, r4, r5
 80004d0:	10a4      	asrs	r4, r4, #2
 80004d2:	2600      	movs	r6, #0
 80004d4:	42a6      	cmp	r6, r4
 80004d6:	d109      	bne.n	80004ec <__libc_init_array+0x24>
 80004d8:	4d0b      	ldr	r5, [pc, #44]	; (8000508 <__libc_init_array+0x40>)
 80004da:	4c0c      	ldr	r4, [pc, #48]	; (800050c <__libc_init_array+0x44>)
 80004dc:	f000 f818 	bl	8000510 <_init>
 80004e0:	1b64      	subs	r4, r4, r5
 80004e2:	10a4      	asrs	r4, r4, #2
 80004e4:	2600      	movs	r6, #0
 80004e6:	42a6      	cmp	r6, r4
 80004e8:	d105      	bne.n	80004f6 <__libc_init_array+0x2e>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f0:	4798      	blx	r3
 80004f2:	3601      	adds	r6, #1
 80004f4:	e7ee      	b.n	80004d4 <__libc_init_array+0xc>
 80004f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fa:	4798      	blx	r3
 80004fc:	3601      	adds	r6, #1
 80004fe:	e7f2      	b.n	80004e6 <__libc_init_array+0x1e>
 8000500:	08000528 	.word	0x08000528
 8000504:	08000528 	.word	0x08000528
 8000508:	08000528 	.word	0x08000528
 800050c:	0800052c 	.word	0x0800052c

08000510 <_init>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr

0800051c <_fini>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr
